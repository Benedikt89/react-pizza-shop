{"version":3,"sources":["common/FormControls/FormControl.module.css","common/FormControls/DatePicker.js","Components/Order/Order.module.css","utils/validators.js","common/FormControls/FormsControls.jsx","Components/Order/Order.jsx"],"names":["module","exports","DatepickerRU","props","handleDayChange","bind","state","selectedDay","undefined","day","this","setState","past","before","Date","inputProps","onDayChange","dayPickerProps","locale","localeUtils","MomentLocaleUtils","modifiers","disabled","daysOfWeek","getDate","React","Component","renderDateTimePicker","label","meta","touched","error","warning","className","style","fieldWrapper","errorMessage","max","min","required","value","number","isNaN","Number","phoneMask","createTextMask","pattern","renderField","input","type","placeholder","DropDownSelect","renderSelectOptions","option","index","key","times","map","reduxForm","form","handleSubmit","pristine","reset","submitting","formControl","onSubmit","Field","name","component","validate","warn","showTime","row","onClick","compose","connect","totalQuantity","getTotalQuantity","submitOrder","fetchOrders","useEffect","to","pageWrapper","container","formData"],"mappings":"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","file":"static/js/6.19057692.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControl_formControl__perW0\",\"fieldWrapper\":\"FormControl_fieldWrapper__2cv25\",\"error\":\"FormControl_error__dPqbn\",\"errorMessage\":\"FormControl_errorMessage__32JbU\",\"row\":\"FormControl_row__1tKW1\"};","import React from 'react';\r\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\r\n\r\nimport 'react-day-picker/lib/style.css';\r\nimport style from './FormControl.module.css';\r\n\r\nimport MomentLocaleUtils from 'react-day-picker/moment';\r\nimport 'moment/locale/ru';\r\n\r\nexport class DatepickerRU extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleDayChange = this.handleDayChange.bind(this);\r\n        this.state = {\r\n            selectedDay: undefined,\r\n        };\r\n    }\r\n    handleDayChange(day) {\r\n        this.setState({ selectedDay: day });\r\n    }\r\n\r\n    render() {\r\n     //   const { meta: { touched, error } } = this.props.field;\r\n        const { selectedDay } = this.state;\r\n        const past = {\r\n            before: new Date(),\r\n        }\r\n        const weekends = {\r\n            daysOfWeek: [0, 6],\r\n        };\r\n\r\n\r\n        function isFirstOfMonth(day) {\r\n            return day.getDate() === 25;\r\n        }\r\n        return (\r\n            <div>\r\n            <div>\r\n                <DayPickerInput\r\n                    inputProps={{...this.props}}\r\n                    onDayChange={this.handleDayChange}\r\n                    dayPickerProps={{\r\n                        locale: 'ru',\r\n                        localeUtils: MomentLocaleUtils,\r\n                        modifiers: {\r\n                            disabled: [past, weekends, isFirstOfMonth ],\r\n                        }\r\n                    }}\r\n                />\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport const renderDateTimePicker = ({ label, meta: {touched, error, warning}, ...props}) => (\r\n    <div>\r\n        <label>{label}</label>\r\n        <div className={style.fieldWrapper + ' ' + (error && touched ? style.error : '')}>\r\n            <DatepickerRU {...props}/>\r\n            {touched &&\r\n            ((error && <span className={style.errorMessage}>{error}</span>)\r\n                || (warning && <span className={style.errorMessage}>{warning}</span>))}\r\n        </div>\r\n    </div>\r\n)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Order_item__38xTP\",\"container\":\"Order_container__1hQrN App_container__20Okq\",\"orderWrapper\":\"Order_orderWrapper__3hVwr Order_container__1hQrN App_container__20Okq\",\"pageWrapper\":\"Order_pageWrapper__1OYhX Order_container__1hQrN App_container__20Okq\"};","\r\nexport const required = value => value ? undefined : 'Required';\r\n\r\nexport const maxLength = max => value =>\r\n    value && value.length > max ? `Must be ${max} characters or less` : undefined;\r\n\r\nexport const maxLength15 = maxLength(15);\r\n\r\nexport const number = value => value && isNaN(Number(value)) ? 'Must be a number' : undefined;\r\n\r\nexport const minValue = min => value =>\r\n    value && value < min ? `Must be at least ${min}` : undefined;\r\n\r\nexport const minValue18 = minValue(18);\r\n\r\nexport const email = value =>\r\n    value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ?\r\n        'Invalid email address' : undefined;\r\n\r\nexport const tooOld = value =>\r\n    value && value > 65 ? 'You might be too old for this' : undefined;\r\n\r\nexport const aol = value =>\r\n    value && /.+@aol\\.com/.test(value) ?\r\n        'Really? You still use AOL for your email?' : undefined;\r\n","import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {aol, email, maxLength15, number, required, tooOld} from \"../../utils/validators\";\r\nimport {createTextMask} from 'redux-form-input-masks';\r\nimport {renderDateTimePicker} from \"./DatePicker\";\r\n\r\nimport 'react-widgets/dist/css/react-widgets.css';\r\nimport style from './FormControl.module.css';\r\n\r\n\r\nconst phoneMask = createTextMask({\r\n    pattern: '8-(099) 999-9999',\r\n});\r\n\r\nconst renderField = ({input, label, type, meta: {touched, error, warning}}) => (\r\n    <div>\r\n        <label>{label}</label>\r\n        <div className={style.fieldWrapper + ' ' + (error && touched ? style.error : '')}>\r\n            <input {...input} placeholder={label} type={type}/>\r\n            {touched &&\r\n            ((error && <span className={style.errorMessage}>{error}</span>)\r\n                || (warning && <span className={style.errorMessage}>{warning}</span>))}\r\n        </div>\r\n    </div>\r\n);\r\n\r\n\r\n\r\nclass DropDownSelect extends React.Component {\r\n\r\n    renderSelectOptions = (option, index) => (\r\n        <option key={option} value={index}>{option}</option>\r\n    );\r\n\r\n    render() {\r\n        const {meta: {touched, error, warning}} = this.props;\r\n        const {input, label} = this.props;\r\n        return (\r\n            <div>\r\n                <label>{label}</label>\r\n                <div className={style.fieldWrapper}>\r\n                    <select {...input}>\r\n                        <option value=\"\">Select</option>\r\n                        {this.props.times.map(this.renderSelectOptions)}\r\n                    </select>\r\n                    {touched &&\r\n                    ((error && <span className={style.errorMessage}>{error}</span>)\r\n                        || (warning && <span className={style.errorMessage}>{warning}</span>))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst OrderReduxForm = (props) => {\r\n    const {handleSubmit, pristine, reset, submitting} = props;\r\n    const times = ['', '10', '11', '12'];\r\n    return (\r\n        <form className={style.formControl} onSubmit={handleSubmit}>\r\n\r\n            <Field name=\"phone\"\r\n                   type=\"text\"\r\n                   component={renderField}\r\n                   {...phoneMask}\r\n                   label=\"Номер телефона *\"\r\n                   validate={[required, number]}\r\n            />\r\n            <Field name=\"first_name\"\r\n                   type=\"text\"\r\n                   component={renderField}\r\n                   label=\"Name\"\r\n                   validate={[required]}\r\n                   warn={required}\r\n            />\r\n            <Field\r\n                name=\"delivery_date\"\r\n                showTime={false}\r\n                component={renderDateTimePicker}\r\n                validate={[required]}\r\n                warn={required}\r\n                label=\"Дата Заказа\"\r\n            />\r\n            <Field name=\"delivery_time\"\r\n                   type=\"select\"\r\n                   component={DropDownSelect}\r\n                   label=\"time\"\r\n                   times={times}\r\n                   validate={[number]}\r\n                   warn={required}\r\n            />\r\n            <Field name=\"address\"\r\n                   type=\"text\"\r\n                   component={renderField}\r\n                   label=\"address\"\r\n                   validate={[required]}\r\n                   warn={required}\r\n            />\r\n            <div className={style.fieldWrapper}>\r\n                <label>comment</label>\r\n                <Field name=\"comment\"\r\n                       type=\"text\"\r\n                       component=\"textarea\"\r\n                       label=\"comment\"\r\n                       validate={[]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <label>payment</label>\r\n                <div className={style.row}>\r\n                    <label><Field name=\"payment\" component=\"input\" type=\"radio\" value=\"0\"/> cash</label>\r\n                    <label><Field name=\"payment\" component=\"input\" type=\"radio\" value=\"1\"/> card</label>\r\n                    <label><Field name=\"payment\" component=\"input\" type=\"radio\" value=\"3\"/> online</label>\r\n                </div>\r\n            </div>\r\n\r\n            {props.error && <div>\r\n                <span className={style.error}>{props.error}</span>\r\n            </div>}\r\n            <div>\r\n                <button type=\"submit\" disabled={submitting}>Order</button>\r\n                <button type=\"button\" disabled={pristine || submitting} onClick={reset}>Clear Values</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default reduxForm({form: 'order'})(OrderReduxForm)\r\n","import React, {useEffect} from 'react';\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {submitOrder, fetchOrders} from \"../../Redux/pizzasReducer.ts\";\r\nimport OrderForm from \"./../../common/FormControls/FormsControls\";\r\nimport style from './Order.module.css';\r\nimport {getTotalQuantity} from \"../../Redux/selectors\";\r\n\r\nconst Order = ({totalQuantity, submitOrder, fetchOrders}) => {\r\n\r\n    useEffect(fetchOrders, []);\r\n\r\n    const onSubmit = (formData) => {\r\n        submitOrder(formData);\r\n    };\r\n    if (totalQuantity <= 0) {\r\n        return <Redirect to={`/`}/>\r\n    } else\r\n        return (\r\n            <div className={style.pageWrapper}>\r\n                <h3>Подтвердить заказ</h3>\r\n\r\n\r\n                <div className={style.container}>\r\n                    <span>Поля отмеченные * обязательны для заполнения</span>\r\n                    <OrderForm onSubmit={onSubmit}/>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        totalQuantity: getTotalQuantity(state)\r\n    }\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {submitOrder, fetchOrders})\r\n)(Order);\r\n"],"sourceRoot":""}